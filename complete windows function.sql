-- 1. Create new column containing average rating of restaurants throught the dataset
select name,city,rating_count,cost,round(avg(rating) over(),1) as avg_rating from restaurants;

-- 2. Create new column containing average rating_count of restaurants throught the dataset
select name,city,rating,cost,round(avg(rating_count) over(),1)as avg_rating_count from restaurants;

-- 3. Create new column containing average cost of restaurants throught the dataset
select name,city,rating_count,rating,cost,round(avg(cost) over(),2)as avg_cost from restaurants;

-- 4. Create column containing average, min, max of cost,rating,rating_count of restaurants throught the dataset
select name,city,rating_count,rating,cost,
round(avg(cost) over(),2)as avg_cost,
max(cost) over() as max_cost,
min(cost) over() as min_cost,
round(avg(rating) over(),2)as avg_rating,
max(rating) over() as max_rating,
min(rating) over() as min_rating,
round(avg(rating_count) over(),2)as avg_rating_count,
max(rating_count) over() as max_rating_count,
min(rating_count) over() as min_rating_count from restaurants;

-- 5.Create column containing average cost of the city where that specific restaurant is from
select name,city,cost, avg(cost) over(partition by city) as avg_city_cost from restaurants;

-- 6. Create column containing average cost of the cuisine which that specific restaurant is serving
select name,city,cost,cuisine, avg(cost) over(partition by cuisine) as avg_cuisine_cost from restaurants;

-- 7. Create both column together
select name,city,cost,cuisine, avg(cost) over(partition by city) as avg_city_cost ,
avg(cost) over(partition by cuisine) as avg_cuisine_cost from restaurants ;

-- 8. List the restaurants whose cost is more than the average cost of the restaurants?
select name,city,cuisine,cost,t.avg_cost from (select *, avg(cost) over() as avg_cost from restaurants) t where t.cost > t.avg_cost; 

-- 9. List the restaurants whose cuisine cost is more than the average cost?
select name,city,cuisine,cost,t.avg_cost from (select *, avg(cost) over(partition by cuisine) as avg_cost from restaurants) t where t.cost > t.avg_cost;

-- 10. Rank every restaurant from most expensive to least expensive
select name,city,rating_count,cost,rank() over(order by cost desc) as rank_ from restaurants;

-- 11. Rank every restaurant from most visited to least visited
select name, city,rating_count,cost , rank() over(order by rating_count desc) as rank_ from restaurants;

-- 12. Rank every restaurant from most expensive to least expensive as per their city
select name,city,rating_count,cost,rank() over(partition by city order by cost desc ) as rank_ from restaurants;

-- 13. Dense-rank every restaurant from most expensive to least expensive as per their city
select name,city,rating_count,cost,dense_rank() over(partition by city order by cost desc ) as rank_ from restaurants;

-- 14. Row-number every restaurant from most expensive to least expensive as per their city
select name,city,rating_count,cost, row_number() over(partition by city order by cost desc) as rank_ from restaurants;

-- 15. Rank every restaurant from most expensive to least expensive as per their city along with its city [Adilabad - 1, Adilabad - 2]
select name,city,rating_count,cost, concat(city,"--",row_number() over(partition by city order by cost)) as rank_ from restaurants;

-- 16. Find top 5 restaurants of every city as per their revenue
select * from(select *,cost*rating_count as revenue,row_number() over(partition by city order by cost*rating_count) as rank_  from restaurants) f
where f.rank_<6;

-- 17. Find top 5 restaurants of every cuisine as per their revenue
select * from(select *,cost*rating_count as revenue,row_number() over(partition by cuisine order by cost*rating_count) as rank_  from restaurants) f
where f.rank_<6;

-- 18.List the top 5 cuisines as per the revenue generated by top 5 restaurants of every cuisine
select cuisine, sum(rating_count*cost) as revenue from 	
( 	select *, cost*rating_count, 
	row_number() over(partition by cuisine order by cost*rating_count desc) as 'rank'
    from restaurants
) t 
where t.rank < 6
group by cuisine
order by revenue desc;

-- 19.What is the of the total revenue is generated by top 1% restaurants
SELECT SUM(cost * rating_count) AS top_1_percent_revenue
FROM (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY cost * rating_count DESC) AS rn,
           COUNT(*) OVER () AS total_rows,
           cost * rating_count AS revenue
    FROM restaurants
) ranked
WHERE rn <= total_rows * 0.01;

-- 20. Check the same for top 20% restaurants
SELECT SUM(revenue) AS top_20_percent_revenue
FROM (
    SELECT *,
           cost * rating_count AS revenue,
           ROW_NUMBER() OVER (ORDER BY cost * rating_count DESC) AS rn,
           COUNT(*) OVER () AS total_restaurants
    FROM restaurants
) ranked
WHERE rn <= total_restaurants * 0.20;










